generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                    String         @id @default(cuid())
  username              String
  phone                 String         @unique
  password              String
  socket                String?
  role                  String         @default("unauthorized") // user, admin, waiter
  isActive              Boolean        @default(true)
  clientPassCode        String?        @unique
  chatId                String?        @unique
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  notificationsSent     notification[] @relation("NotificationFromUser")
  notificationsReceived notification[] @relation("NotificationToUser")
}

model productCategory {
  id        String    @id @default(cuid())
  cname     String    @unique
  photo     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   product[]
}

model product {
  id          String   @id @default(cuid())
  name        String
  description String?
  photo       String
  price       Float
  discount    Float    @default(0)
  quantity    Int
  isAvailable Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category  productCategory @relation(fields: [categoryId], references: [id])
  orderItem orderItem[]
}

model waiters {
  id        String   @id @default(cuid())
  name      String
  phone     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  table     table[]
}

model table {
  id                    String         @id @default(cuid())
  name                  String
  tNumber               Int            @unique
  roomNumber            String?
  waiterId              String?
  // socket                String?
  waiter                waiters?       @relation(fields: [waiterId], references: [id])
  isOccupied            Boolean        @default(false)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  order                 order[]
  notificationsSent     notification[] @relation("NotificationFromTable")
  notificationsReceived notification[] @relation("NotificationToTable")
  TableSocket           TableSocket[]
}

// --- THIS IS THE FIX ---
// Create a new model to store active sockets for each table and guest.
model TableSocket {
  id        String   @id @default(cuid())
  tableId   String
  guestId   String   @unique
  socketId  String   @unique // Each socket ID can only be in the table once
  createdAt DateTime @default(now())

  table table @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId])
  @@index([guestId])
}

model order {
  id         String      @id @default(cuid())
  orderCode  String      @default(cuid())
  tableId    String?
  totalPrice Float
  location   String?
  phone      String?
  clientName String?
  guestId    String?
  status     String      @default("pending")
  table      table?      @relation(fields: [tableId], references: [id])
  orderItems orderItem[]
  createdBy  String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model orderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Float
  status    String   @default("pending") // pending, completed, cancelled
  order     order    @relation(fields: [orderId], references: [id])
  product   product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model feedBack {
  id         String   @id @default(cuid())
  clientName String
  phone      String?
  message    String
  rate       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model promotion {
  id          String   @id @default(cuid())
  title       String?
  description String?
  photo       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String // e.g., order, feedback, promotion
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Direction of the Notification ---
  // Who sent the notification? (Can be an admin/user or a customer at a table)
  fromUserId  String?
  fromTableId String?

  // Who is the notification for?
  toUserId  String?
  toTableId String?

  // --- Prisma Relations ---
  // These establish the foreign key constraints
  fromUser  user?  @relation("NotificationFromUser", fields: [fromUserId], references: [id])
  fromTable table? @relation("NotificationFromTable", fields: [fromTableId], references: [id])
  toUser    user?  @relation("NotificationToUser", fields: [toUserId], references: [id])
  toTable   table? @relation("NotificationToTable", fields: [toTableId], references: [id])
}
